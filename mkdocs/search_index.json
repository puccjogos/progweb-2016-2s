{
    "docs": [
        {
            "location": "/", 
            "text": "Programa\u00e7\u00e3o de jogos para web\n\n\n\n\n\nEste site \u00e9 a apostila digital da disciplina \nPrograma\u00e7\u00e3o de jogos para web\n, ministrada no 2\u00ba semestre de 2016 no curso de Tecnologia em Jogos Digitais da PUC-Campinas. Aqui voc\u00ea encontra os links para materiais te\u00f3ricos e pr\u00e1ticos, assim como outras informa\u00e7\u00f5es relevantes.\n\n\nCronograma\n\n\n\n\n\n\n\n\nData\n\n\nConte\u00fado\n\n\n\n\n\n\n\n\n\n\n05/08\n\n\nIntrodu\u00e7\u00e3o a jogos web\n\n\n\n\n\n\n12/08\n\n\nTecnologias da web\n\n\n\n\n\n\n19/08\n\n\nIntrodu\u00e7\u00e3o ao Javascript\n\n\n\n\n\n\n26/08\n\n\nIntrodu\u00e7\u00e3o ao Phaser\n / Organiza\u00e7\u00e3o de projeto web\n\n\n\n\n\n\n02/09\n\n\nInputs e movimento\n / Oficina de jogo individual\n\n\n\n\n\n\n09/09\n\n\nWorkflow de assets\n / Oficina de jogo individual\n\n\n\n\n\n\n16/09\n\n\nSemana Integrada\n\n\n\n\n\n\n23/09\n\n\nOficina de jogo individual\n\n\n\n\n\n\n30/09\n\n\nDebate sobre jogos individuais / post-mortem\n\n\n\n\n\n\n07/10\n\n\nIntrodu\u00e7\u00e3o a Node.js\n / Oficina de jogo coletivo\n\n\n\n\n\n\n14/10\n\n\nSockets e multiplayer por turnos\n\n\n\n\n\n\n21/10\n\n\nSockets e multiplayer em tempo real\n\n\n\n\n\n\n28/10\n\n\nPersist\u00eancia e REST\n / Oficina de jogo coletivo\n\n\n\n\n\n\n04/11\n\n\nIntegra\u00e7\u00e3o com servi\u00e7os\n / Oficina de jogo coletivo\n\n\n\n\n\n\n11/11\n\n\nOficina de jogo coletivo\n\n\n\n\n\n\n18/11\n\n\nDeploy, publica\u00e7\u00e3o e controle de qualidade\n\n\n\n\n\n\n25/11\n\n\nDebate e apresenta\u00e7\u00f5es de jogos coletivos\n\n\n\n\n\n\n02/12\n\n\nDesenvolvimento de apps para a web: MEAN\n\n\n\n\n\n\n09/12\n\n\nFeriado\n\n\n\n\n\n\n16/12\n\n\nFechamento da disciplina\n\n\n\n\n\n\n\n\nPlano de ensino\n\n\nEmenta\n\n\nCriar sistemas remotos e distribu\u00eddos para suportar aplica\u00e7\u00f5es de entretenimento digital. Utilizar programas de desenvolvimento de conte\u00fado e entretenimento digital para web. Tend\u00eancias da \u00e1rea, em especial a introdu\u00e7\u00e3o de novas tecnologias e sua integra\u00e7\u00e3o com diferentes tecnologias para web.\n\n\nObjetivos gerais\n\n\nPreparar alunos para o desenvolvimento de jogos para o ambiente web. Desenvolver um repert\u00f3rio de ferramentas variadas e de m\u00e9todos \u00e1geis de cria\u00e7\u00e3o de jogos digitais. Incentivar experimenta\u00e7\u00e3o e inova\u00e7\u00e3o dentro do contexto dos jogos para web.\n\n\nObjetivos espec\u00edficos\n\n\nFormar um repert\u00f3rio de ferramentas para a cria\u00e7\u00e3o de jogos para web. Capacitar o aluno para avaliar a adequa\u00e7\u00e3o de diferentes t\u00e9cnicas e ferramentas que apoiem diferentes processos criativos de jogos para web. Elaborar documenta\u00e7\u00e3o e reflex\u00e3o apropriada e utilizar m\u00e9todos de trabalho voltados para o desenvolvimento \u00e1gil. Planejar e realizar jogos para web utilizando boas pr\u00e1ticas e metodologias consolidadas.\n\n\nConte\u00fado program\u00e1tico\n\n\nA import\u00e2ncia de usar ferramentas adequadas para o desenvolvimento r\u00e1pido de jogos ser\u00e1 trabalhada atrav\u00e9s de experi\u00eancias pr\u00e1ticas de planejamento e produ\u00e7\u00e3o de jogos digitais, assim como da apresenta\u00e7\u00e3o de conceitos que apoiem essa pr\u00e1tica.\n\n\n\n\nContexto t\u00e9cnico, cultural e est\u00e9tico de jogos na web.\n\n\nFerramentas para programa\u00e7\u00e3o de jogos para web.\n\n\nProcessos, metodologias e boas pr\u00e1ticas de desenvolvimento web.\n\n\nFerramentas de produ\u00e7\u00e3o: colabora\u00e7\u00e3o, versionamento, compartilhamento.\n\n\nIntrodu\u00e7\u00e3o a tecnologias web distribu\u00eddas e multi-plataforma e seu potencial para jogos.\n\n\n\n\nAvalia\u00e7\u00e3o\n\n\nA avalia\u00e7\u00e3o ser\u00e1 feita atrav\u00e9s da entrega de dois jogos digitais, juntamente com documenta\u00e7\u00e3o e relat\u00f3rios apropriados. O primeiro jogo, individual e de pequeno escopo, ser\u00e1 entregue na metade da disciplina e o segundo, coletivo e mais bem acabado, ao final.\n\n\nCada entrega de jogo digital deve conter os seguintes elementos: documento de game design, prot\u00f3tipos, vers\u00e3o final e post-mortem. Um jogo s\u00f3 ser\u00e1 considerado devidamente entregue se o professor tiver acesso a todos esses elementos. Cada elemento ser\u00e1 avaliado segundo sua adequa\u00e7\u00e3o tem\u00e1tica e de escopo e sua qualidade t\u00e9cnica. A nota m\u00e1xima para o jogo individual \u00e9 de 5 pontos e do jogo coletivo, 5 pontos.\n\n\nNota final\n\n\nJogo individual + Jogo coletivo\n\n\nRecupera\u00e7\u00e3o\n\n\nPara a recupera\u00e7\u00e3o, ser\u00e1 realizado um jogo web individual, cujo escopo e proposta ser\u00e1 acordado entre professor e aluno, que ser\u00e1 avaliado e ter\u00e1 nota m\u00e1xima equivalente ao trabalho anterior que substitui. Exerc\u00edcios n\u00e3o entregues n\u00e3o ter\u00e3o possibilidade de nova avalia\u00e7\u00e3o.\n\n\nIntegridade Acad\u00eamica\n\n\nA constata\u00e7\u00e3o de cola ou pl\u00e1gio em qualquer atividade avaliada (prova ou atividade pr\u00e1tica) implicar\u00e1 em reprova\u00e7\u00e3o na disciplina dos alunos envolvidos, com nota zero. Entende-se por envolvidos tanto os alunos que fizeram a cola (ou pl\u00e1gio) como os que permitiram que ela fosse feita. Dependendo da gravidade do incidente, as devidas autoridades institucionais ser\u00e3o acionadas para a ado\u00e7\u00e3o das san\u00e7\u00f5es disciplinares cab\u00edveis.\n\n\nNa d\u00favida do que se considera pl\u00e1gio, o professor deve ser consultado antes da entrega do trabalho em quest\u00e3o.", 
            "title": "Home"
        }, 
        {
            "location": "/#programacao-de-jogos-para-web", 
            "text": "Este site \u00e9 a apostila digital da disciplina  Programa\u00e7\u00e3o de jogos para web , ministrada no 2\u00ba semestre de 2016 no curso de Tecnologia em Jogos Digitais da PUC-Campinas. Aqui voc\u00ea encontra os links para materiais te\u00f3ricos e pr\u00e1ticos, assim como outras informa\u00e7\u00f5es relevantes.", 
            "title": "Programa\u00e7\u00e3o de jogos para web"
        }, 
        {
            "location": "/#cronograma", 
            "text": "Data  Conte\u00fado      05/08  Introdu\u00e7\u00e3o a jogos web    12/08  Tecnologias da web    19/08  Introdu\u00e7\u00e3o ao Javascript    26/08  Introdu\u00e7\u00e3o ao Phaser  / Organiza\u00e7\u00e3o de projeto web    02/09  Inputs e movimento  / Oficina de jogo individual    09/09  Workflow de assets  / Oficina de jogo individual    16/09  Semana Integrada    23/09  Oficina de jogo individual    30/09  Debate sobre jogos individuais / post-mortem    07/10  Introdu\u00e7\u00e3o a Node.js  / Oficina de jogo coletivo    14/10  Sockets e multiplayer por turnos    21/10  Sockets e multiplayer em tempo real    28/10  Persist\u00eancia e REST  / Oficina de jogo coletivo    04/11  Integra\u00e7\u00e3o com servi\u00e7os  / Oficina de jogo coletivo    11/11  Oficina de jogo coletivo    18/11  Deploy, publica\u00e7\u00e3o e controle de qualidade    25/11  Debate e apresenta\u00e7\u00f5es de jogos coletivos    02/12  Desenvolvimento de apps para a web: MEAN    09/12  Feriado    16/12  Fechamento da disciplina", 
            "title": "Cronograma"
        }, 
        {
            "location": "/#plano-de-ensino", 
            "text": "", 
            "title": "Plano de ensino"
        }, 
        {
            "location": "/#ementa", 
            "text": "Criar sistemas remotos e distribu\u00eddos para suportar aplica\u00e7\u00f5es de entretenimento digital. Utilizar programas de desenvolvimento de conte\u00fado e entretenimento digital para web. Tend\u00eancias da \u00e1rea, em especial a introdu\u00e7\u00e3o de novas tecnologias e sua integra\u00e7\u00e3o com diferentes tecnologias para web.", 
            "title": "Ementa"
        }, 
        {
            "location": "/#objetivos-gerais", 
            "text": "Preparar alunos para o desenvolvimento de jogos para o ambiente web. Desenvolver um repert\u00f3rio de ferramentas variadas e de m\u00e9todos \u00e1geis de cria\u00e7\u00e3o de jogos digitais. Incentivar experimenta\u00e7\u00e3o e inova\u00e7\u00e3o dentro do contexto dos jogos para web.", 
            "title": "Objetivos gerais"
        }, 
        {
            "location": "/#objetivos-especificos", 
            "text": "Formar um repert\u00f3rio de ferramentas para a cria\u00e7\u00e3o de jogos para web. Capacitar o aluno para avaliar a adequa\u00e7\u00e3o de diferentes t\u00e9cnicas e ferramentas que apoiem diferentes processos criativos de jogos para web. Elaborar documenta\u00e7\u00e3o e reflex\u00e3o apropriada e utilizar m\u00e9todos de trabalho voltados para o desenvolvimento \u00e1gil. Planejar e realizar jogos para web utilizando boas pr\u00e1ticas e metodologias consolidadas.", 
            "title": "Objetivos espec\u00edficos"
        }, 
        {
            "location": "/#conteudo-programatico", 
            "text": "A import\u00e2ncia de usar ferramentas adequadas para o desenvolvimento r\u00e1pido de jogos ser\u00e1 trabalhada atrav\u00e9s de experi\u00eancias pr\u00e1ticas de planejamento e produ\u00e7\u00e3o de jogos digitais, assim como da apresenta\u00e7\u00e3o de conceitos que apoiem essa pr\u00e1tica.   Contexto t\u00e9cnico, cultural e est\u00e9tico de jogos na web.  Ferramentas para programa\u00e7\u00e3o de jogos para web.  Processos, metodologias e boas pr\u00e1ticas de desenvolvimento web.  Ferramentas de produ\u00e7\u00e3o: colabora\u00e7\u00e3o, versionamento, compartilhamento.  Introdu\u00e7\u00e3o a tecnologias web distribu\u00eddas e multi-plataforma e seu potencial para jogos.", 
            "title": "Conte\u00fado program\u00e1tico"
        }, 
        {
            "location": "/#avaliacao", 
            "text": "A avalia\u00e7\u00e3o ser\u00e1 feita atrav\u00e9s da entrega de dois jogos digitais, juntamente com documenta\u00e7\u00e3o e relat\u00f3rios apropriados. O primeiro jogo, individual e de pequeno escopo, ser\u00e1 entregue na metade da disciplina e o segundo, coletivo e mais bem acabado, ao final.  Cada entrega de jogo digital deve conter os seguintes elementos: documento de game design, prot\u00f3tipos, vers\u00e3o final e post-mortem. Um jogo s\u00f3 ser\u00e1 considerado devidamente entregue se o professor tiver acesso a todos esses elementos. Cada elemento ser\u00e1 avaliado segundo sua adequa\u00e7\u00e3o tem\u00e1tica e de escopo e sua qualidade t\u00e9cnica. A nota m\u00e1xima para o jogo individual \u00e9 de 5 pontos e do jogo coletivo, 5 pontos.", 
            "title": "Avalia\u00e7\u00e3o"
        }, 
        {
            "location": "/#nota-final", 
            "text": "Jogo individual + Jogo coletivo", 
            "title": "Nota final"
        }, 
        {
            "location": "/#recuperacao", 
            "text": "Para a recupera\u00e7\u00e3o, ser\u00e1 realizado um jogo web individual, cujo escopo e proposta ser\u00e1 acordado entre professor e aluno, que ser\u00e1 avaliado e ter\u00e1 nota m\u00e1xima equivalente ao trabalho anterior que substitui. Exerc\u00edcios n\u00e3o entregues n\u00e3o ter\u00e3o possibilidade de nova avalia\u00e7\u00e3o.", 
            "title": "Recupera\u00e7\u00e3o"
        }, 
        {
            "location": "/#integridade-academica", 
            "text": "A constata\u00e7\u00e3o de cola ou pl\u00e1gio em qualquer atividade avaliada (prova ou atividade pr\u00e1tica) implicar\u00e1 em reprova\u00e7\u00e3o na disciplina dos alunos envolvidos, com nota zero. Entende-se por envolvidos tanto os alunos que fizeram a cola (ou pl\u00e1gio) como os que permitiram que ela fosse feita. Dependendo da gravidade do incidente, as devidas autoridades institucionais ser\u00e3o acionadas para a ado\u00e7\u00e3o das san\u00e7\u00f5es disciplinares cab\u00edveis.  Na d\u00favida do que se considera pl\u00e1gio, o professor deve ser consultado antes da entrega do trabalho em quest\u00e3o.", 
            "title": "Integridade Acad\u00eamica"
        }, 
        {
            "location": "/aulas/introducao-a-jogos-web/", 
            "text": "Introdu\u00e7\u00e3o a jogos web", 
            "title": "Introdu\u00e7\u00e3o a jogos web"
        }, 
        {
            "location": "/aulas/introducao-a-jogos-web/#introducao-a-jogos-web", 
            "text": "", 
            "title": "Introdu\u00e7\u00e3o a jogos web"
        }, 
        {
            "location": "/aulas/tecnologias-da-web/", 
            "text": "Tecnologias da Web\n\n\nNesta aula, vamos ver na pr\u00e1tica como diferentes tecnologias se combinam dentro do browser.\n\n\nHTML\n\n\n\u00c9 uma linguagem de marca\u00e7\u00e3o baseada em \ntags\n (etiquetas) que definem tipos de informa\u00e7\u00e3o e seu conte\u00fado para que um browser passa mostr\u00e1-los ao usu\u00e1rio. Documentos html s\u00e3o a base para a web, pois eles s\u00e3o o hub onde outros arquivos s\u00e3o interligados no browser. Abaixo, um exemplo simples de arquivo HTML.\n\n\n!DOCTYPE html\n\n\nhtml\n\n    \n!-- isto \u00e9 um coment\u00e1rio --\n\n    \nhead\n\n        \nmeta charset=\nUTF-8\n\n        \ntitle\nT\u00edtulo da p\u00e1gina\n/title\n\n    \n/head\n\n    \nbody\n\n        \np class=\nexemplo\nPar\u00e1grafo com conte\u00fado\n/p\n\n    \n/body\n\n\n/html\n\n\n\n\n\nAqui est\u00e1 uma lista das principais tags de HTML:\n\n\n\n\nhead\n : marca o in\u00edcio e fim de informa\u00e7\u00f5es meta, como caracteres autorizados, folhas de estilo, palavras-chave.\n\n\ntitle\n : t\u00edtulo da p\u00e1gina.\n\n\nbody\n : onde est\u00e1 o conte\u00fado que \u00e9 mostrado no corpo da p\u00e1gina.\n\n\nscript\n : tag para marcar trechos de script variados, como JavaScript, dentro do pr\u00f3prio arquivo HTML.\n\n\nlink\n : tag que indica um arquivo externo sendo referenciado pelo arquivo HTML, como folhas de estilo e scripts. \n\n\nstyle\n : marca trechos de c\u00f3digo que define estilo visual da p\u00e1gina.\n\n\nimg\n : define uma imagem a ser carregada de um arquivo externo.\n\n\ncanvas\n : tag que define uma \u00e1rea para conter gr\u00e1ficos desenhados por c\u00f3digo.\n\n\ndiv\n : tag que define uma sub-divis\u00e3o da p\u00e1gina, pr\u00e1tica para organizar o seu conte\u00fado.\n\n\na\n : tag que define um hiperlink.\n\n\n\n\nExiste, a partir da defini\u00e7\u00e3o do HTML5, uma s\u00e9rie de novas tags que permitem uma organiza\u00e7\u00e3o mais sem\u00e2ntica do conte\u00fado. Aqui est\u00e1 um diagrama com algumas das mais importantes. Para saber mais sobre as novas tags, \nleia essa lista compilada pela Mozilla\n ou esse \nmini-tutorial da w3schools\n.\n\n\n\n\nCada tag em HTML pode ter atributos, que especificam como ela funciona. Alguns atributos se aplicam a todas as tags, como \nids\n e \nclasses\n (ambos servem para nomear uma parte do conte\u00fado da p\u00e1gina). Outros s\u00e3o espec\u00edficos de algumas tags, como \nsrc\n (endere\u00e7o de arquivo referenciado) ou \nhref\n (endere\u00e7o para link).\n\n\nh1 id=\nmanchete\nUm dentista animal!\n/h1\n\n\n\np class=\nlide\nCachorro foge de casa em Campinas pra estudar odontologia em Botucatu. \na href=\nnoticia.html\nSaiba mais!\n/a\n/p\n\n\n\n\n\nCSS\n\n\n\u00c9 uma linguagem que define a apresenta\u00e7\u00e3o visual de elementos de uma p\u00e1gina. Vale tanto para HTML quanto outras linguagens de marca\u00e7\u00e3o, como XML. O seu funcionamento b\u00e1sico se d\u00e1 atrav\u00e9s de \nseletores\n, que definem os objetos nos quais um determinado estilo ser\u00e1 aplicado (seja pela tag, por atributos ou posi\u00e7\u00e3o relativa), e \npropriedades\n, onde o estado de cada caracter\u00edstica desse objeto \u00e9 definido. Veja o exemplo abaixo.\n\n\n/* seletor de par\u00e1grafo */\np {\n    // propriedades alteradas\n    color : #ff0000;\n    font-weight : bold;\n}\n\n\n\n\nO c\u00f3digo em CSS pode existir de diversas formas em uma p\u00e1gina HTML: como parte da pr\u00f3pria p\u00e1gina, delimitada por uma tag \nstyle\n, dentro de um arquivo externo conectado atrav\u00e9s da tag \nlink\n ou como o atributo \nstyle\n de uma tag.\n\n\nOutro aspecto importante do CSS \u00e9 que as regras de estilo s\u00e3o aplicadas em cascata, ou seja, regras definidas antes s\u00e3o aplicadas antes que regras posteriores e regras mais espec\u00edficas tem prioridade sobre regras mais gerais. Veja o exemplo abaixo.\n\n\nbody {\n    color : red;\n}\n\np {\n    color : green;\n}\n/* neste exemplo, os par\u00e1grafos ser\u00e3o verdes e\ntodos outros textos no corpo da p\u00e1gina \nser\u00e3o vermelhos. */\n\n\n\n\nMais refer\u00eancias e tutoriais sobre HTML e CSS \naqui\n. Para fazer testes e praticar HTML e CSS, o \nCodepen\n \u00e9 uma boa alternativa.\n\n\nJavaScript (ou JS)\n\n\n\u00c9 uma linguagem de programa\u00e7\u00e3o de alto n\u00edvel, que permite o uso de v\u00e1rios paradigmas de programa\u00e7\u00e3o. \u00c9 tamb\u00e9m din\u00e2mica, orientada a objetos (atrav\u00e9s de prot\u00f3tipos), imperativa e funcional. \u00c9 atrav\u00e9s de JS que criamos a maior parte da interatividade dentro de uma p\u00e1gina no browser. O JavaScript tem acesso a diferentes propriedades e informa\u00e7\u00f5es contidas numa p\u00e1gina e podemos criar \nscripts\n para manuse\u00e1-las.\n\n\nC\u00f3digo em JS pode estar conectado a uma p\u00e1gina de duas maneiras principais: atrav\u00e9s de tags \nscript\n e de arquivos externos linkados com tags \nscript\n. Exemplo abaixo.\n\n\nscript type=\ntext/JavaScript\n\n// funcao JavaScript\nfunction OlaMundo () {\n    console.log(\nola mundo\n);\n}\n\n/script\n\n\n// arquivo externo\n\nscript src=\nolaMundo.js\n /\n\n\n\n\n\nQuando uma p\u00e1gina web \u00e9 carregada no browser, o documento \u00e9 transformado em uma hierarquia de objetos, acess\u00edveis via c\u00f3digo. Essa hierarquia \u00e9 chamada de \nDOM (documento object model)\n. Atrav\u00e9s dela, podemos criar fun\u00e7\u00f5es para reagir a eventos diversos, alterar propriedades e conte\u00fado de tags e at\u00e9 criar novos conte\u00fados a partir de scripts. Exemplo abaixo.\n\n\n// quando clicar em qualquer lugar da pagina\n// altera o conte\u00fado do elemento com id \nmensagem\n\n\n\np id=\nmensagem\n algum texto anterior \n/p\n\n\n\nscript type=\ntext/JavaScript\n\ndocument.addEventListener(\nclick\n, function(){\n    document.getElementById(\nmensagem\n).innerHTML = \nOla Mundo\n;\n});\n\n/script\n\n\n\n\n\nComo vemos no exemplo, a sintaxe para acessar elementos \u00e9 um tanto quanto verbosa. Para isso, foram criadas bibliotecas para facilitar esse acessoe  deixar a escrita de JavaScript no browser mais simples. Uma das mais populares \u00e9 o \njQuery\n. O mesmo c\u00f3digo acima ficaria:\n\n\np id=\nmensagem\n algum texto anterior \n/p\n\n\n$(document).click(function() {\n  $(\n#mensagem\n).text (\nOla Mundo\n);\n});\n\n/script\n\n\n\n\n\nExistem muitas bibliotecas de JavaScript, com objetivos e funcionalidades diferentes. \u00c9 bastante comum que v\u00e1rias bibliotecas sejam utilizadas ao mesmo tempo em um projeto para web, e a engine \nPhaser\n que vamos utilizar para desenvolver jogos \u00e9 uma dessas bibliotecas. Por sua vez, ela tamb\u00e9m utiliza a biblioteca \nPixi\n para a renderiza\u00e7\u00e3o de gr\u00e1ficos. Essa diversidade e extensibilidade do JavaScript \u00e9 uma de suas principais vantagens, e tamb\u00e9m uma de suas caracter\u00edsticas mais desorientadoras no in\u00edcio de aprendizado.", 
            "title": "Tecnologias da web"
        }, 
        {
            "location": "/aulas/tecnologias-da-web/#tecnologias-da-web", 
            "text": "Nesta aula, vamos ver na pr\u00e1tica como diferentes tecnologias se combinam dentro do browser.", 
            "title": "Tecnologias da Web"
        }, 
        {
            "location": "/aulas/tecnologias-da-web/#html", 
            "text": "\u00c9 uma linguagem de marca\u00e7\u00e3o baseada em  tags  (etiquetas) que definem tipos de informa\u00e7\u00e3o e seu conte\u00fado para que um browser passa mostr\u00e1-los ao usu\u00e1rio. Documentos html s\u00e3o a base para a web, pois eles s\u00e3o o hub onde outros arquivos s\u00e3o interligados no browser. Abaixo, um exemplo simples de arquivo HTML.  !DOCTYPE html  html \n     !-- isto \u00e9 um coment\u00e1rio -- \n     head \n         meta charset= UTF-8 \n         title T\u00edtulo da p\u00e1gina /title \n     /head \n     body \n         p class= exemplo Par\u00e1grafo com conte\u00fado /p \n     /body  /html   Aqui est\u00e1 uma lista das principais tags de HTML:   head  : marca o in\u00edcio e fim de informa\u00e7\u00f5es meta, como caracteres autorizados, folhas de estilo, palavras-chave.  title  : t\u00edtulo da p\u00e1gina.  body  : onde est\u00e1 o conte\u00fado que \u00e9 mostrado no corpo da p\u00e1gina.  script  : tag para marcar trechos de script variados, como JavaScript, dentro do pr\u00f3prio arquivo HTML.  link  : tag que indica um arquivo externo sendo referenciado pelo arquivo HTML, como folhas de estilo e scripts.   style  : marca trechos de c\u00f3digo que define estilo visual da p\u00e1gina.  img  : define uma imagem a ser carregada de um arquivo externo.  canvas  : tag que define uma \u00e1rea para conter gr\u00e1ficos desenhados por c\u00f3digo.  div  : tag que define uma sub-divis\u00e3o da p\u00e1gina, pr\u00e1tica para organizar o seu conte\u00fado.  a  : tag que define um hiperlink.   Existe, a partir da defini\u00e7\u00e3o do HTML5, uma s\u00e9rie de novas tags que permitem uma organiza\u00e7\u00e3o mais sem\u00e2ntica do conte\u00fado. Aqui est\u00e1 um diagrama com algumas das mais importantes. Para saber mais sobre as novas tags,  leia essa lista compilada pela Mozilla  ou esse  mini-tutorial da w3schools .   Cada tag em HTML pode ter atributos, que especificam como ela funciona. Alguns atributos se aplicam a todas as tags, como  ids  e  classes  (ambos servem para nomear uma parte do conte\u00fado da p\u00e1gina). Outros s\u00e3o espec\u00edficos de algumas tags, como  src  (endere\u00e7o de arquivo referenciado) ou  href  (endere\u00e7o para link).  h1 id= manchete Um dentista animal! /h1  p class= lide Cachorro foge de casa em Campinas pra estudar odontologia em Botucatu.  a href= noticia.html Saiba mais! /a /p", 
            "title": "HTML"
        }, 
        {
            "location": "/aulas/tecnologias-da-web/#css", 
            "text": "\u00c9 uma linguagem que define a apresenta\u00e7\u00e3o visual de elementos de uma p\u00e1gina. Vale tanto para HTML quanto outras linguagens de marca\u00e7\u00e3o, como XML. O seu funcionamento b\u00e1sico se d\u00e1 atrav\u00e9s de  seletores , que definem os objetos nos quais um determinado estilo ser\u00e1 aplicado (seja pela tag, por atributos ou posi\u00e7\u00e3o relativa), e  propriedades , onde o estado de cada caracter\u00edstica desse objeto \u00e9 definido. Veja o exemplo abaixo.  /* seletor de par\u00e1grafo */\np {\n    // propriedades alteradas\n    color : #ff0000;\n    font-weight : bold;\n}  O c\u00f3digo em CSS pode existir de diversas formas em uma p\u00e1gina HTML: como parte da pr\u00f3pria p\u00e1gina, delimitada por uma tag  style , dentro de um arquivo externo conectado atrav\u00e9s da tag  link  ou como o atributo  style  de uma tag.  Outro aspecto importante do CSS \u00e9 que as regras de estilo s\u00e3o aplicadas em cascata, ou seja, regras definidas antes s\u00e3o aplicadas antes que regras posteriores e regras mais espec\u00edficas tem prioridade sobre regras mais gerais. Veja o exemplo abaixo.  body {\n    color : red;\n}\n\np {\n    color : green;\n}\n/* neste exemplo, os par\u00e1grafos ser\u00e3o verdes e\ntodos outros textos no corpo da p\u00e1gina \nser\u00e3o vermelhos. */  Mais refer\u00eancias e tutoriais sobre HTML e CSS  aqui . Para fazer testes e praticar HTML e CSS, o  Codepen  \u00e9 uma boa alternativa.", 
            "title": "CSS"
        }, 
        {
            "location": "/aulas/tecnologias-da-web/#javascript-ou-js", 
            "text": "\u00c9 uma linguagem de programa\u00e7\u00e3o de alto n\u00edvel, que permite o uso de v\u00e1rios paradigmas de programa\u00e7\u00e3o. \u00c9 tamb\u00e9m din\u00e2mica, orientada a objetos (atrav\u00e9s de prot\u00f3tipos), imperativa e funcional. \u00c9 atrav\u00e9s de JS que criamos a maior parte da interatividade dentro de uma p\u00e1gina no browser. O JavaScript tem acesso a diferentes propriedades e informa\u00e7\u00f5es contidas numa p\u00e1gina e podemos criar  scripts  para manuse\u00e1-las.  C\u00f3digo em JS pode estar conectado a uma p\u00e1gina de duas maneiras principais: atrav\u00e9s de tags  script  e de arquivos externos linkados com tags  script . Exemplo abaixo.  script type= text/JavaScript \n// funcao JavaScript\nfunction OlaMundo () {\n    console.log( ola mundo );\n} /script \n\n// arquivo externo script src= olaMundo.js  /   Quando uma p\u00e1gina web \u00e9 carregada no browser, o documento \u00e9 transformado em uma hierarquia de objetos, acess\u00edveis via c\u00f3digo. Essa hierarquia \u00e9 chamada de  DOM (documento object model) . Atrav\u00e9s dela, podemos criar fun\u00e7\u00f5es para reagir a eventos diversos, alterar propriedades e conte\u00fado de tags e at\u00e9 criar novos conte\u00fados a partir de scripts. Exemplo abaixo.  // quando clicar em qualquer lugar da pagina\n// altera o conte\u00fado do elemento com id  mensagem  p id= mensagem  algum texto anterior  /p  script type= text/JavaScript \ndocument.addEventListener( click , function(){\n    document.getElementById( mensagem ).innerHTML =  Ola Mundo ;\n}); /script   Como vemos no exemplo, a sintaxe para acessar elementos \u00e9 um tanto quanto verbosa. Para isso, foram criadas bibliotecas para facilitar esse acessoe  deixar a escrita de JavaScript no browser mais simples. Uma das mais populares \u00e9 o  jQuery . O mesmo c\u00f3digo acima ficaria:  p id= mensagem  algum texto anterior  /p \n\n$(document).click(function() {\n  $( #mensagem ).text ( Ola Mundo );\n}); /script   Existem muitas bibliotecas de JavaScript, com objetivos e funcionalidades diferentes. \u00c9 bastante comum que v\u00e1rias bibliotecas sejam utilizadas ao mesmo tempo em um projeto para web, e a engine  Phaser  que vamos utilizar para desenvolver jogos \u00e9 uma dessas bibliotecas. Por sua vez, ela tamb\u00e9m utiliza a biblioteca  Pixi  para a renderiza\u00e7\u00e3o de gr\u00e1ficos. Essa diversidade e extensibilidade do JavaScript \u00e9 uma de suas principais vantagens, e tamb\u00e9m uma de suas caracter\u00edsticas mais desorientadoras no in\u00edcio de aprendizado.", 
            "title": "JavaScript (ou JS)"
        }, 
        {
            "location": "/aulas/introd-javascript/", 
            "text": "Introdu\u00e7\u00e3o ao JavaScript\n\n\nNesta aula, vamos aprofundar nosso contato com a linguagem JavaScript, nos familiarizando com sua sintaxe e aprendendo a fazer uso de alguns de seus conceitos centrais, como a orienta\u00e7\u00e3o a objetos.\n\n\nNos exerc\u00edcios, vamos utilizar fluxogramas pra representar algoritmos. \nNeste PDF\n voc\u00ea encontra dicas de como representar programas em fluxograma e como traduzir de uma forma para outra.\n\n\nPara rodar exerc\u00edcios e exemplos, vamos utilizar a ferramenta \nRepl.it\n.\n\n\nSintaxe\n\n\nTipos de dados b\u00e1sicos\n\n\nUma vari\u00e1vel pode guardar tipos de informa\u00e7\u00f5es diferentes durante a execu\u00e7\u00e3o. Os tipos primitivos b\u00e1sicos s\u00e3o:\n\n\nnumber, boolean, string, object\n\n\n\n\nDeclara\u00e7\u00e3o de vari\u00e1veis\n\n\nVari\u00e1veis podem ser declaradas em qualquer lugar do c\u00f3digo. Se forem declaradas dentro de uma fun\u00e7\u00e3o, ser\u00e3o locais a essa fun\u00e7\u00e3o. Vari\u00e1veis n\u00e3o t\u00eam seu tipo declarado.\n\n\nvar nome = \u201cenric\u201d;\nvar idade = 27;\nvar controle = true; // ou false\nvar x, y, z;\n\n\n\n\nOperadores\n\n\n\n\nAtribui\u00e7\u00e3o: =\n\n\nIgualdade e desigualdade: == ou ===, !=\n\n\nOperadores l\u00f3gicos: \n, ||, !\n\n\nIncremento e decremento: ++, +=, \n, -=\n\n\n\n\nRepeti\u00e7\u00e3o\n\n\nwhile (condicao) { \u2026 }\n\ndo { \u2026  } while (condicao); \n\nfor (variavel = v_inicial; variavel \n= condicao; variavel++) { \u2026  }\n\n\n\n\nDecis\u00e3o / desvio de fluxo\n\n\nif (condicao) { \u2026 }\n\nif (condicao) { \u2026 } else { \u2026 }\n\nswitch (variavel) { case valor1 : \u2026 break; case valor2 : \u2026 break; }\n\n\n\n\nFun\u00e7\u00f5es e procedimentos\n\n\nfunction NomeFuncao (parametro1, parametro2) {\n   return valor; // nao eh obrigatorio\n}\n\n\n\n\nVetor\n\n\nVetores s\u00e3o din\u00e2micos e aceitam valores de v\u00e1rios tipos (heterog\u00eaneos).\n\n\nvar Exemplo1 = [1, \u201cbob\u201d, true, 4, 5]; // declara\u00e7\u00e3o literal de vetor\n\nvar Exemplo2 = new Array (tamanho); // declaracao por objeto Array\n\n\n\n\n\n\nOrienta\u00e7\u00e3o a objetos\n\n\nA orienta\u00e7\u00e3o a objetos \u00e9 um paradigma de an\u00e1lise, projeto e programa\u00e7\u00e3o de sistemas de software baseado na composi\u00e7\u00e3o e intera\u00e7\u00e3o entre diversas unidades chamadas de \nobjetos\n. Na programa\u00e7\u00e3o orientada a objetos, implementa-se um conjunto de classes ou prot\u00f3tipos que definem os objetos presentes. Cada classe determina o comportamento (definido nos m\u00e9todos) e estados poss\u00edveis (atributos) de seus objetos, assim como o relacionamento com outros objetos.\n\n\nvar foo = {one: 1, two: 2};\n\n// bar.[[prototype]] = foo\nvar bar = Object.create( foo );\n\nbar.three = 3;\n\nbar.one; // 1\nbar.two; // 2\nbar.three; // 3\n\n\n\n\nClasse\n\n\nClasse representa um conjunto de objetos com caracter\u00edsticas afins. Uma classe define o comportamento dos objetos atrav\u00e9s de seus m\u00e9todos, e quais estados ele \u00e9 capaz de manter atrav\u00e9s de seus atributos. \nExemplo de classe: Os seres humanos.\n Em Javacript n\u00e3o temos classes nativas, mas atrav\u00e9s de \nprot\u00f3tipos e cria\u00e7\u00e3o de objetos\n podemos simular sua funcionalidade.\n\n\nEm Javascript, n\u00e3o utilizamos classes para representar objetos ou rela\u00e7\u00f5es de heran\u00e7a. O conceito utilizado \u00e9 o de \nprot\u00f3tipos\n, no qual esse tipo de rela\u00e7\u00e3o \u00e9 representado atrav\u00e9s da \nclonagem\n de objetos j\u00e1 existentes e da \ndelega\u00e7\u00e3o\n de acesso a membros a partir do objeto-fliho at\u00e9 o objeto-pai com o membro procurado. Para mais detalhes do funcionamento de prot\u00f3tipos em Javascript, \neste livro \u00e9 uma boa refer\u00eancia\n, assim como este \nartigo\n. Aqui est\u00e1 dispon\u00edvel \numa discuss\u00e3o mais aprofundada de prot\u00f3tipos na programa\u00e7\u00e3o de jogos\n.\n\n\nSubclasse\n\n\nSubclasse \u00e9 uma nova classe que herda caracter\u00edsticas de sua(s) classe(s) ancestral.\n\n\nObjeto / inst\u00e2ncia\n\n\nObjeto / inst\u00e2ncia de uma classe. Um objeto \u00e9 capaz de armazenar estados atrav\u00e9s de seus atributos e reagir a mensagens enviadas a ele, assim como se relacionar e enviar mensagens a outros objetos. \nExemplo de objetos da classe \nHumano\n: Alice, Maria.\n\n\nMembros\n\n\nMembros s\u00e3o caracter\u00edsticas de um objeto. Basicamente a estrutura de dados que vai representar a classe, assim como fun\u00e7\u00f5es (ou m\u00e9todos) associadas a ela. \nExemplos: Funcion\u00e1rio: nome, endere\u00e7o, telefone, CPF,\n; Carro: nome, marca, ano, cor, \u2026; Livro: autor, editora, ano.\n O conjunto de valores dos atributos de um determinado objeto \u00e9 chamado de estado.\n\n\n\n\nPrograma\u00e7\u00e3o imperativa e funcional\n\n\nprograma\u00e7\u00e3o imperativa \u00e9 um paradigma de programa\u00e7\u00e3o que descreve a computa\u00e7\u00e3o como a\u00e7\u00f5es, enunciados ou comandos que mudam o estado (vari\u00e1veis) de um programa. J\u00e1 a programa\u00e7\u00e3o funcional \u00e9 um paradigma de programa\u00e7\u00e3o que trata a computa\u00e7\u00e3o como uma avalia\u00e7\u00e3o de fun\u00e7\u00f5es matem\u00e1ticas e que evita estados ou dados mut\u00e1veis. Ela enfatiza a aplica\u00e7\u00e3o de fun\u00e7\u00f5es, em contraste da programa\u00e7\u00e3o imperativa, que enfatiza mudan\u00e7as no estado do programa.\n\n\nEm Javascript, usamos elementos de ambos paradigmas: ao mesmo tempo que manipulamos o estado de objetos e vari\u00e1veis de forma imperativa, a linguagem tem muitas funcionalidades para a manipula\u00e7\u00e3o de fun\u00e7\u00f5es de forma elaborada, como \naninhamento de fun\u00e7\u00f5es, closures e fun\u00e7\u00f5es lambda\n.\n\n\n// exemplo de funcao de primeira classe\nvar umaFuncao = function (arg1) {\n    return arg1 + 2;\n}\numaFuncao (1) // retorna 3\n\n// exemplo de closure\n// retorna lista de livros com pelo menos montante de copias vendidas.\nfunction bestSellers(montante) {\n  return listaLivros.filter(\n      function (livro) { return livro.vendas \n= montante; }\n    );\n}", 
            "title": "Introdu\u00e7\u00e3o ao Javascript"
        }, 
        {
            "location": "/aulas/introd-javascript/#introducao-ao-javascript", 
            "text": "Nesta aula, vamos aprofundar nosso contato com a linguagem JavaScript, nos familiarizando com sua sintaxe e aprendendo a fazer uso de alguns de seus conceitos centrais, como a orienta\u00e7\u00e3o a objetos.  Nos exerc\u00edcios, vamos utilizar fluxogramas pra representar algoritmos.  Neste PDF  voc\u00ea encontra dicas de como representar programas em fluxograma e como traduzir de uma forma para outra.  Para rodar exerc\u00edcios e exemplos, vamos utilizar a ferramenta  Repl.it .", 
            "title": "Introdu\u00e7\u00e3o ao JavaScript"
        }, 
        {
            "location": "/aulas/introd-javascript/#sintaxe", 
            "text": "", 
            "title": "Sintaxe"
        }, 
        {
            "location": "/aulas/introd-javascript/#tipos-de-dados-basicos", 
            "text": "Uma vari\u00e1vel pode guardar tipos de informa\u00e7\u00f5es diferentes durante a execu\u00e7\u00e3o. Os tipos primitivos b\u00e1sicos s\u00e3o:  number, boolean, string, object", 
            "title": "Tipos de dados b\u00e1sicos"
        }, 
        {
            "location": "/aulas/introd-javascript/#declaracao-de-variaveis", 
            "text": "Vari\u00e1veis podem ser declaradas em qualquer lugar do c\u00f3digo. Se forem declaradas dentro de uma fun\u00e7\u00e3o, ser\u00e3o locais a essa fun\u00e7\u00e3o. Vari\u00e1veis n\u00e3o t\u00eam seu tipo declarado.  var nome = \u201cenric\u201d;\nvar idade = 27;\nvar controle = true; // ou false\nvar x, y, z;", 
            "title": "Declara\u00e7\u00e3o de vari\u00e1veis"
        }, 
        {
            "location": "/aulas/introd-javascript/#operadores", 
            "text": "Atribui\u00e7\u00e3o: =  Igualdade e desigualdade: == ou ===, !=  Operadores l\u00f3gicos:  , ||, !  Incremento e decremento: ++, +=,  , -=", 
            "title": "Operadores"
        }, 
        {
            "location": "/aulas/introd-javascript/#repeticao", 
            "text": "while (condicao) { \u2026 }\n\ndo { \u2026  } while (condicao); \n\nfor (variavel = v_inicial; variavel  = condicao; variavel++) { \u2026  }", 
            "title": "Repeti\u00e7\u00e3o"
        }, 
        {
            "location": "/aulas/introd-javascript/#decisao-desvio-de-fluxo", 
            "text": "if (condicao) { \u2026 }\n\nif (condicao) { \u2026 } else { \u2026 }\n\nswitch (variavel) { case valor1 : \u2026 break; case valor2 : \u2026 break; }", 
            "title": "Decis\u00e3o / desvio de fluxo"
        }, 
        {
            "location": "/aulas/introd-javascript/#funcoes-e-procedimentos", 
            "text": "function NomeFuncao (parametro1, parametro2) {\n   return valor; // nao eh obrigatorio\n}", 
            "title": "Fun\u00e7\u00f5es e procedimentos"
        }, 
        {
            "location": "/aulas/introd-javascript/#vetor", 
            "text": "Vetores s\u00e3o din\u00e2micos e aceitam valores de v\u00e1rios tipos (heterog\u00eaneos).  var Exemplo1 = [1, \u201cbob\u201d, true, 4, 5]; // declara\u00e7\u00e3o literal de vetor\n\nvar Exemplo2 = new Array (tamanho); // declaracao por objeto Array", 
            "title": "Vetor"
        }, 
        {
            "location": "/aulas/introd-javascript/#orientacao-a-objetos", 
            "text": "A orienta\u00e7\u00e3o a objetos \u00e9 um paradigma de an\u00e1lise, projeto e programa\u00e7\u00e3o de sistemas de software baseado na composi\u00e7\u00e3o e intera\u00e7\u00e3o entre diversas unidades chamadas de  objetos . Na programa\u00e7\u00e3o orientada a objetos, implementa-se um conjunto de classes ou prot\u00f3tipos que definem os objetos presentes. Cada classe determina o comportamento (definido nos m\u00e9todos) e estados poss\u00edveis (atributos) de seus objetos, assim como o relacionamento com outros objetos.  var foo = {one: 1, two: 2};\n\n// bar.[[prototype]] = foo\nvar bar = Object.create( foo );\n\nbar.three = 3;\n\nbar.one; // 1\nbar.two; // 2\nbar.three; // 3", 
            "title": "Orienta\u00e7\u00e3o a objetos"
        }, 
        {
            "location": "/aulas/introd-javascript/#classe", 
            "text": "Classe representa um conjunto de objetos com caracter\u00edsticas afins. Uma classe define o comportamento dos objetos atrav\u00e9s de seus m\u00e9todos, e quais estados ele \u00e9 capaz de manter atrav\u00e9s de seus atributos.  Exemplo de classe: Os seres humanos.  Em Javacript n\u00e3o temos classes nativas, mas atrav\u00e9s de  prot\u00f3tipos e cria\u00e7\u00e3o de objetos  podemos simular sua funcionalidade.  Em Javascript, n\u00e3o utilizamos classes para representar objetos ou rela\u00e7\u00f5es de heran\u00e7a. O conceito utilizado \u00e9 o de  prot\u00f3tipos , no qual esse tipo de rela\u00e7\u00e3o \u00e9 representado atrav\u00e9s da  clonagem  de objetos j\u00e1 existentes e da  delega\u00e7\u00e3o  de acesso a membros a partir do objeto-fliho at\u00e9 o objeto-pai com o membro procurado. Para mais detalhes do funcionamento de prot\u00f3tipos em Javascript,  este livro \u00e9 uma boa refer\u00eancia , assim como este  artigo . Aqui est\u00e1 dispon\u00edvel  uma discuss\u00e3o mais aprofundada de prot\u00f3tipos na programa\u00e7\u00e3o de jogos .", 
            "title": "Classe"
        }, 
        {
            "location": "/aulas/introd-javascript/#subclasse", 
            "text": "Subclasse \u00e9 uma nova classe que herda caracter\u00edsticas de sua(s) classe(s) ancestral.", 
            "title": "Subclasse"
        }, 
        {
            "location": "/aulas/introd-javascript/#objeto-instancia", 
            "text": "Objeto / inst\u00e2ncia de uma classe. Um objeto \u00e9 capaz de armazenar estados atrav\u00e9s de seus atributos e reagir a mensagens enviadas a ele, assim como se relacionar e enviar mensagens a outros objetos.  Exemplo de objetos da classe  Humano : Alice, Maria.", 
            "title": "Objeto / inst\u00e2ncia"
        }, 
        {
            "location": "/aulas/introd-javascript/#membros", 
            "text": "Membros s\u00e3o caracter\u00edsticas de um objeto. Basicamente a estrutura de dados que vai representar a classe, assim como fun\u00e7\u00f5es (ou m\u00e9todos) associadas a ela.  Exemplos: Funcion\u00e1rio: nome, endere\u00e7o, telefone, CPF, ; Carro: nome, marca, ano, cor, \u2026; Livro: autor, editora, ano.  O conjunto de valores dos atributos de um determinado objeto \u00e9 chamado de estado.", 
            "title": "Membros"
        }, 
        {
            "location": "/aulas/introd-javascript/#programacao-imperativa-e-funcional", 
            "text": "programa\u00e7\u00e3o imperativa \u00e9 um paradigma de programa\u00e7\u00e3o que descreve a computa\u00e7\u00e3o como a\u00e7\u00f5es, enunciados ou comandos que mudam o estado (vari\u00e1veis) de um programa. J\u00e1 a programa\u00e7\u00e3o funcional \u00e9 um paradigma de programa\u00e7\u00e3o que trata a computa\u00e7\u00e3o como uma avalia\u00e7\u00e3o de fun\u00e7\u00f5es matem\u00e1ticas e que evita estados ou dados mut\u00e1veis. Ela enfatiza a aplica\u00e7\u00e3o de fun\u00e7\u00f5es, em contraste da programa\u00e7\u00e3o imperativa, que enfatiza mudan\u00e7as no estado do programa.  Em Javascript, usamos elementos de ambos paradigmas: ao mesmo tempo que manipulamos o estado de objetos e vari\u00e1veis de forma imperativa, a linguagem tem muitas funcionalidades para a manipula\u00e7\u00e3o de fun\u00e7\u00f5es de forma elaborada, como  aninhamento de fun\u00e7\u00f5es, closures e fun\u00e7\u00f5es lambda .  // exemplo de funcao de primeira classe\nvar umaFuncao = function (arg1) {\n    return arg1 + 2;\n}\numaFuncao (1) // retorna 3\n\n// exemplo de closure\n// retorna lista de livros com pelo menos montante de copias vendidas.\nfunction bestSellers(montante) {\n  return listaLivros.filter(\n      function (livro) { return livro.vendas  = montante; }\n    );\n}", 
            "title": "Programa\u00e7\u00e3o imperativa e funcional"
        }, 
        {
            "location": "/aulas/introd-phaser/", 
            "text": "Introdu\u00e7\u00e3o ao Phaser\n\n\nRoteiro da aula:\n\n\n\n\nApresenta\u00e7\u00e3o da engine \nPhaser\n\n\nAn\u00e1lise de \njogo-exemplo\n\n\nConversa sobre projetos individuais\n\n\n\n\nAtividade: An\u00e1lise de jogo-exemplo\n\n\n\u00c9 poss\u00edvel desenvolver em Phaser utilizando uma variedade de ferramentas. Para testes r\u00e1pidos e aprendizado de sistemas, sugiro o uso do \nsandbox (editor online)\n, mas para o desenvolvimento de um projeto maior, como o jogo coletivo, \u00e9 interessante o uso de uma ferramenta local, como o Brackets. Uma outra alternativa \u00e9 um editor espec\u00edfico para apps HTML5, como o \nIntel XDK\n que j\u00e1 cont\u00e9m templates para o desenvolvimento com Phaser.\n\n\nPraticidades\n\n\n\n\nDocumenta\u00e7\u00e3o online\n\n\nExemplos", 
            "title": "Introdu\u00e7\u00e3o ao Phaser"
        }, 
        {
            "location": "/aulas/introd-phaser/#introducao-ao-phaser", 
            "text": "Roteiro da aula:   Apresenta\u00e7\u00e3o da engine  Phaser  An\u00e1lise de  jogo-exemplo  Conversa sobre projetos individuais", 
            "title": "Introdu\u00e7\u00e3o ao Phaser"
        }, 
        {
            "location": "/aulas/introd-phaser/#atividade-analise-de-jogo-exemplo", 
            "text": "\u00c9 poss\u00edvel desenvolver em Phaser utilizando uma variedade de ferramentas. Para testes r\u00e1pidos e aprendizado de sistemas, sugiro o uso do  sandbox (editor online) , mas para o desenvolvimento de um projeto maior, como o jogo coletivo, \u00e9 interessante o uso de uma ferramenta local, como o Brackets. Uma outra alternativa \u00e9 um editor espec\u00edfico para apps HTML5, como o  Intel XDK  que j\u00e1 cont\u00e9m templates para o desenvolvimento com Phaser.", 
            "title": "Atividade: An\u00e1lise de jogo-exemplo"
        }, 
        {
            "location": "/aulas/introd-phaser/#praticidades", 
            "text": "Documenta\u00e7\u00e3o online  Exemplos", 
            "title": "Praticidades"
        }, 
        {
            "location": "/aulas/inputs-multiplataforma/", 
            "text": "Input e movimento\n\n\nInputs multiplataforma\n\n\nExitem duas etapas principais para o desenvolvimento de sistemas de input multi-plataformas. Primeiro, \u00e9 importante desacoplar as a\u00e7\u00f5es no mundo do jogo de um tipo de entrada. Segundo, \u00e9 importante associar essa nova camada de abstra\u00e7\u00e3o a cada uma das plataformas desejadas, adaptando conforme necess\u00e1rio. Para ajudar nesse processo, vamos trabalhar com a cria\u00e7\u00e3o de objetos para auxiliar nosso input.\n\n\nAtrav\u00e9s da classe \nInput\n (\ndocumenta\u00e7\u00e3o\n) n\u00f3s temos acesso \u00e0 uma s\u00e9rie de funcionalidades para cria\u00e7\u00e3o de inputs multiplataforma.\n\n\nA pr\u00f3pria biblioteca tamb\u00e9m agrupa uma s\u00e9rie de funcionalidades de input dentro do pr\u00f3prio \nSprite\n, na propriedade \nsprite.input\n, do tipo \nInputHandler\n (\ndocumenta\u00e7\u00e3o\n). Com ela, podemos tratar eventos como cliques, drags, checar overlaps com pixel perfect e mais.\n\n\nTeclado\n\n\nExemplo: \nusando teclas direcionais\n\n\n// dentro de create()\ncursors = game.input.keyboard.createCursorKeys();\n...\n// dentro de update()\nif (cursors.up.isDown)\n{\n    ...\n}\n\n\n\n\nExemplo: \nteclas com fun\u00e7\u00f5es\n\n\n// dentro de create()\nkey1 = game.input.keyboard.addKey(Phaser.Keyboard.ONE);\nkey1.onDown.add(callback, this);\n\n\n\n\nExemplo: \nbloquear eventos-padr\u00e3o do browser\n\n\n// dentro de create()\ngame.input.keyboard.addKeyCapture([\n    Phaser.Keyboard.LEFT,\n    Phaser.Keyboard.RIGHT,\n    Phaser.Keyboard.UP,\n    Phaser.Keyboard.DOWN,\n    Phaser.Keyboard.SPACEBAR\n]);\n\n\n\n\nMouse e toque\n\n\nPhaser usa o conceito de \npointer\n tanto para o mouse quanto para interfaces de toque. A classe Pointer guarda uma s\u00e9rie de informa\u00e7\u00f5es relativas \u00e0 posi\u00e7\u00e3o, velocidade, id e estado dos eventos de toque e mouse.\n\n\n\n\nExemplo: \neventos de mouse/toque\n\n\nExemplo: \ntoque fora do jogo\n\n\nExemplo: \nmulti-toque\n.\n\n\nExemplo: \njoystick por toque\n\n\n\n\nGamepad\n\n\nO Phaser tem suporte a gamepads, como de XBox 360 ou qualquer outro conectado ao dispositivo PC. No entanto, este suporte ainda \u00e9 experimental e inst\u00e1vel.\n\n\n\n\nExemplo: \ntela de teste de gamepad\n\n\nExemplo: \nm\u00faltiplos gamepads\n\n\n\n\nMovimento no Phaser\n\n\nF\u00edsica Arcade\n\n\nPara implementar movimenta\u00e7\u00e3o no Phaser podemos alterar diretamente as coordenadas de objetos do jogo como sprites e texto. No entanto, uma forma mais consistente e poderosa de fazer esse tipo de funcionalidade passa por utilizar o sistema de f\u00edsica mais b\u00e1sico da ferramenta: \nArcade Physics\n.\n\n\nUsando o sistema de f\u00edsica Arcade, temos fun\u00e7\u00f5es para controlar acelera\u00e7\u00e3o, rota\u00e7\u00e3o, c\u00e1lculo de \u00e2ngulos, colis\u00f5es e overlaps, assim como colliders de v\u00e1rios tipos. Para jogos que n\u00e3o buscam um movimento f\u00edsico realista, essa op\u00e7\u00e3o \u00e9 mais que suficiente.\n\n\nTweens\n\n\nOutra forma de movimenta\u00e7\u00e3o poss\u00edvel \u00e9 atrav\u00e9s de tweens (\nexemplos\n). Esta \u00e9 uma alternativa interessante para jogos em que colis\u00f5es s\u00e3o desnecess\u00e1rias e que permite um alto grau de controle sobre o aspecto visual e timing dos movimentos. Ela se baseia na defini\u00e7\u00e3o de posi\u00e7\u00f5es e tempos, assim como diferentes formas de interpola\u00e7\u00e3o. \u00c9 poss\u00edvel encadear movimentos e ativ\u00e1-los de acordo com o input do usu\u00e1rio.\n\n\nExerc\u00edcios em sala\n\n\nPrimeiro, vamos usar materiais dos seguintes pacotes de arte aberta:\n\n\n\n\nSpace Shooter, de Kenney\n\n\nPlatformer Pack Redux, de Kenney\n\n\n\n\nCom esses materiais vamos criar os seguintes tipos de movimento e input:\n\n\n\n\nMovimento em 4 dire\u00e7\u00f5es com o teclado\n\n\nTransla\u00e7\u00e3o simples\n\n\nCom rota\u00e7\u00e3o\n\n\nCom acelera\u00e7\u00e3o\n\n\n\n\n\n\nMovimento estilo plataforma com teclado e mouse\n\n\nMovimento anal\u00f3gico com o mouse / toque\n\n\nObjetos perseguindo outros objetos", 
            "title": "Inputs e movimento"
        }, 
        {
            "location": "/aulas/inputs-multiplataforma/#input-e-movimento", 
            "text": "", 
            "title": "Input e movimento"
        }, 
        {
            "location": "/aulas/inputs-multiplataforma/#inputs-multiplataforma", 
            "text": "Exitem duas etapas principais para o desenvolvimento de sistemas de input multi-plataformas. Primeiro, \u00e9 importante desacoplar as a\u00e7\u00f5es no mundo do jogo de um tipo de entrada. Segundo, \u00e9 importante associar essa nova camada de abstra\u00e7\u00e3o a cada uma das plataformas desejadas, adaptando conforme necess\u00e1rio. Para ajudar nesse processo, vamos trabalhar com a cria\u00e7\u00e3o de objetos para auxiliar nosso input.  Atrav\u00e9s da classe  Input  ( documenta\u00e7\u00e3o ) n\u00f3s temos acesso \u00e0 uma s\u00e9rie de funcionalidades para cria\u00e7\u00e3o de inputs multiplataforma.  A pr\u00f3pria biblioteca tamb\u00e9m agrupa uma s\u00e9rie de funcionalidades de input dentro do pr\u00f3prio  Sprite , na propriedade  sprite.input , do tipo  InputHandler  ( documenta\u00e7\u00e3o ). Com ela, podemos tratar eventos como cliques, drags, checar overlaps com pixel perfect e mais.", 
            "title": "Inputs multiplataforma"
        }, 
        {
            "location": "/aulas/inputs-multiplataforma/#teclado", 
            "text": "Exemplo:  usando teclas direcionais  // dentro de create()\ncursors = game.input.keyboard.createCursorKeys();\n...\n// dentro de update()\nif (cursors.up.isDown)\n{\n    ...\n}  Exemplo:  teclas com fun\u00e7\u00f5es  // dentro de create()\nkey1 = game.input.keyboard.addKey(Phaser.Keyboard.ONE);\nkey1.onDown.add(callback, this);  Exemplo:  bloquear eventos-padr\u00e3o do browser  // dentro de create()\ngame.input.keyboard.addKeyCapture([\n    Phaser.Keyboard.LEFT,\n    Phaser.Keyboard.RIGHT,\n    Phaser.Keyboard.UP,\n    Phaser.Keyboard.DOWN,\n    Phaser.Keyboard.SPACEBAR\n]);", 
            "title": "Teclado"
        }, 
        {
            "location": "/aulas/inputs-multiplataforma/#mouse-e-toque", 
            "text": "Phaser usa o conceito de  pointer  tanto para o mouse quanto para interfaces de toque. A classe Pointer guarda uma s\u00e9rie de informa\u00e7\u00f5es relativas \u00e0 posi\u00e7\u00e3o, velocidade, id e estado dos eventos de toque e mouse.   Exemplo:  eventos de mouse/toque  Exemplo:  toque fora do jogo  Exemplo:  multi-toque .  Exemplo:  joystick por toque", 
            "title": "Mouse e toque"
        }, 
        {
            "location": "/aulas/inputs-multiplataforma/#gamepad", 
            "text": "O Phaser tem suporte a gamepads, como de XBox 360 ou qualquer outro conectado ao dispositivo PC. No entanto, este suporte ainda \u00e9 experimental e inst\u00e1vel.   Exemplo:  tela de teste de gamepad  Exemplo:  m\u00faltiplos gamepads", 
            "title": "Gamepad"
        }, 
        {
            "location": "/aulas/inputs-multiplataforma/#movimento-no-phaser", 
            "text": "", 
            "title": "Movimento no Phaser"
        }, 
        {
            "location": "/aulas/inputs-multiplataforma/#fisica-arcade", 
            "text": "Para implementar movimenta\u00e7\u00e3o no Phaser podemos alterar diretamente as coordenadas de objetos do jogo como sprites e texto. No entanto, uma forma mais consistente e poderosa de fazer esse tipo de funcionalidade passa por utilizar o sistema de f\u00edsica mais b\u00e1sico da ferramenta:  Arcade Physics .  Usando o sistema de f\u00edsica Arcade, temos fun\u00e7\u00f5es para controlar acelera\u00e7\u00e3o, rota\u00e7\u00e3o, c\u00e1lculo de \u00e2ngulos, colis\u00f5es e overlaps, assim como colliders de v\u00e1rios tipos. Para jogos que n\u00e3o buscam um movimento f\u00edsico realista, essa op\u00e7\u00e3o \u00e9 mais que suficiente.", 
            "title": "F\u00edsica Arcade"
        }, 
        {
            "location": "/aulas/inputs-multiplataforma/#tweens", 
            "text": "Outra forma de movimenta\u00e7\u00e3o poss\u00edvel \u00e9 atrav\u00e9s de tweens ( exemplos ). Esta \u00e9 uma alternativa interessante para jogos em que colis\u00f5es s\u00e3o desnecess\u00e1rias e que permite um alto grau de controle sobre o aspecto visual e timing dos movimentos. Ela se baseia na defini\u00e7\u00e3o de posi\u00e7\u00f5es e tempos, assim como diferentes formas de interpola\u00e7\u00e3o. \u00c9 poss\u00edvel encadear movimentos e ativ\u00e1-los de acordo com o input do usu\u00e1rio.", 
            "title": "Tweens"
        }, 
        {
            "location": "/aulas/inputs-multiplataforma/#exercicios-em-sala", 
            "text": "Primeiro, vamos usar materiais dos seguintes pacotes de arte aberta:   Space Shooter, de Kenney  Platformer Pack Redux, de Kenney   Com esses materiais vamos criar os seguintes tipos de movimento e input:   Movimento em 4 dire\u00e7\u00f5es com o teclado  Transla\u00e7\u00e3o simples  Com rota\u00e7\u00e3o  Com acelera\u00e7\u00e3o    Movimento estilo plataforma com teclado e mouse  Movimento anal\u00f3gico com o mouse / toque  Objetos perseguindo outros objetos", 
            "title": "Exerc\u00edcios em sala"
        }, 
        {
            "location": "/aulas/workflow/", 
            "text": "Workflow de assets e dados locais\n\n\nNesta aula, vamos trabalhar dois t\u00f3picos: o \nworkflow de assets\n (cria\u00e7\u00e3o, importa\u00e7\u00e3o, ferramentas \u00fateis) e \ncomo salvar e recuperar dados localmente\n.\n\n\nWorkflow de assets\n\n\nTodo asset carregado durante o \npreload\n passa pela classe \nPhaser.Loader\n e depois \u00e9 armazenado, usando chaves em texto, dentro de uma \u00fanica inst\u00e2ncia da classe \nPhaser.Cache\n. Vale a pena dar uma olhada em algumas de suas fun\u00e7\u00f5es. A classe \nCache\n tem uma s\u00e9rie de fun\u00e7\u00f5es que permitem a \nverifica\u00e7\u00e3o se algum asset foi carregado corretamente\n.\n\n\nQuando os arquivos s\u00e3o carregados (durante o \npreload\n), o Phaser dispara uma s\u00e9rie de eventos que podemos usar para dar feedback ou criar fun\u00e7\u00f5es em momentos espec\u00edficos. Pode ser interessante para avisar os jogadores de carregamentos intermedi\u00e1rios. \nVeja o exemplo\n.\n\n\nOutros exemplos interessantes est\u00e3o dispon\u00edveis \naqui\n.\n\n\nImagens\n\n\ngame.load.image('imageKey', 'assets/sprites/phaser2.png');\n\n\n\n\nSpritesheets\n\n\ngame.load.spritesheet('animado', 'assets/sprites/sprites.png', 32, 32);\nsprite.animations.add('walk');\nsprite.animations.play('walk', 50, true);\n\n\n\n\nTilemaps\n\n\nPara carregar mapas, s\u00e3o necess\u00e1rias duas informa\u00e7\u00f5es diferentes: o \ntilemap\n, com as informa\u00e7\u00f5es sobre a disposi\u00e7\u00e3o dos tiles no level em quest\u00e3o, e o \ntileset\n, que \u00e9 a imagem de refer\u00eancia.\n\n\nExemplo\n\n\nSons\n\n\ngame.load.audio('boden', ['assets/audio/bodenstaendig_2000_in_rock_4bit.mp3', 'assets/audio/bodenstaendig_2000_in_rock_4bit.ogg']);\n\n\n\n\nExemplo: Som\n\n\nUma outra possibilidade interessante relacionada a importa\u00e7\u00e3o de sons dentro de um jogo HTML5 \u00e9 o conceito de \naudiosprites\n, ou seja, um \u00fanico arquivo contendo v\u00e1rios sons diferentes. Esses trechos diferentes s\u00e3o anotados em um arquivo externo ou configurados diretamente. Com esse audiosprite, \u00e9 poss\u00edvel tocar v\u00e1rios sons ao mesmo tempo em um grande n\u00famero de browsers, o que \u00e9 uma limita\u00e7\u00e3o atual em dispositivos m\u00f3veis.\n\n\nAtlas\n\n\nAtlas s\u00e3o uma forma de juntar v\u00e1rios sprites e imagens em uma \u00fanica imagem que tem um arquivo auxiliar informando o nome e coordenadas de cada um dos sprites que a comp\u00f5em. O objetivo com isso \u00e9 economizar carregamento e mem\u00f3ria, o que pode ser essencial quando o jogo for lan\u00e7ado. Os custos de servidor e a performance em dispositivos m\u00f3veis s\u00e3o bastante beneficiados pelo uso de atlas. Algumas ferramentas que podem gerar atlas: \nShoeBox\n e \nTexturePacker\n.\n\n\nExemplo de carregamento de atlas\n.\n\n\nDados locais\n\n\nPara guardar dados localmente, podemos usar a funcionalidade \nlocalStorage\n, definida e suportada nos browsers mais modernos. O seu funcionamento \u00e9 bastante simples.\n\n\n// para gravar\nlocalStorage.setItem('nomeInfo', 'conteudo');\n// para recuperar\nlocalStorage.getItem('nomeInfo');\n\n\n\n\nO \nlocalStorage\n guarda apenas strings, ent\u00e3o, para guardar um objeto mais complexo, \u00e9 necess\u00e1rio transform\u00e1-lo em JSON (formato de objeto serializado). Veja o exemplo abaixo.\n\n\n// para guardar\nlocalStorage.setItem('chaveMeuObjeto', JSON.stringify(meuObjeto));\n// para recuperar\nmeuObjeto = JSON.parse(localStorage.getItem('chaveMeuObjeto'));", 
            "title": "Workflow de assets e dados locais"
        }, 
        {
            "location": "/aulas/workflow/#workflow-de-assets-e-dados-locais", 
            "text": "Nesta aula, vamos trabalhar dois t\u00f3picos: o  workflow de assets  (cria\u00e7\u00e3o, importa\u00e7\u00e3o, ferramentas \u00fateis) e  como salvar e recuperar dados localmente .", 
            "title": "Workflow de assets e dados locais"
        }, 
        {
            "location": "/aulas/workflow/#workflow-de-assets", 
            "text": "Todo asset carregado durante o  preload  passa pela classe  Phaser.Loader  e depois \u00e9 armazenado, usando chaves em texto, dentro de uma \u00fanica inst\u00e2ncia da classe  Phaser.Cache . Vale a pena dar uma olhada em algumas de suas fun\u00e7\u00f5es. A classe  Cache  tem uma s\u00e9rie de fun\u00e7\u00f5es que permitem a  verifica\u00e7\u00e3o se algum asset foi carregado corretamente .  Quando os arquivos s\u00e3o carregados (durante o  preload ), o Phaser dispara uma s\u00e9rie de eventos que podemos usar para dar feedback ou criar fun\u00e7\u00f5es em momentos espec\u00edficos. Pode ser interessante para avisar os jogadores de carregamentos intermedi\u00e1rios.  Veja o exemplo .  Outros exemplos interessantes est\u00e3o dispon\u00edveis  aqui .", 
            "title": "Workflow de assets"
        }, 
        {
            "location": "/aulas/workflow/#imagens", 
            "text": "game.load.image('imageKey', 'assets/sprites/phaser2.png');", 
            "title": "Imagens"
        }, 
        {
            "location": "/aulas/workflow/#spritesheets", 
            "text": "game.load.spritesheet('animado', 'assets/sprites/sprites.png', 32, 32);\nsprite.animations.add('walk');\nsprite.animations.play('walk', 50, true);", 
            "title": "Spritesheets"
        }, 
        {
            "location": "/aulas/workflow/#tilemaps", 
            "text": "Para carregar mapas, s\u00e3o necess\u00e1rias duas informa\u00e7\u00f5es diferentes: o  tilemap , com as informa\u00e7\u00f5es sobre a disposi\u00e7\u00e3o dos tiles no level em quest\u00e3o, e o  tileset , que \u00e9 a imagem de refer\u00eancia.  Exemplo", 
            "title": "Tilemaps"
        }, 
        {
            "location": "/aulas/workflow/#sons", 
            "text": "game.load.audio('boden', ['assets/audio/bodenstaendig_2000_in_rock_4bit.mp3', 'assets/audio/bodenstaendig_2000_in_rock_4bit.ogg']);  Exemplo: Som  Uma outra possibilidade interessante relacionada a importa\u00e7\u00e3o de sons dentro de um jogo HTML5 \u00e9 o conceito de  audiosprites , ou seja, um \u00fanico arquivo contendo v\u00e1rios sons diferentes. Esses trechos diferentes s\u00e3o anotados em um arquivo externo ou configurados diretamente. Com esse audiosprite, \u00e9 poss\u00edvel tocar v\u00e1rios sons ao mesmo tempo em um grande n\u00famero de browsers, o que \u00e9 uma limita\u00e7\u00e3o atual em dispositivos m\u00f3veis.", 
            "title": "Sons"
        }, 
        {
            "location": "/aulas/workflow/#atlas", 
            "text": "Atlas s\u00e3o uma forma de juntar v\u00e1rios sprites e imagens em uma \u00fanica imagem que tem um arquivo auxiliar informando o nome e coordenadas de cada um dos sprites que a comp\u00f5em. O objetivo com isso \u00e9 economizar carregamento e mem\u00f3ria, o que pode ser essencial quando o jogo for lan\u00e7ado. Os custos de servidor e a performance em dispositivos m\u00f3veis s\u00e3o bastante beneficiados pelo uso de atlas. Algumas ferramentas que podem gerar atlas:  ShoeBox  e  TexturePacker .  Exemplo de carregamento de atlas .", 
            "title": "Atlas"
        }, 
        {
            "location": "/aulas/workflow/#dados-locais", 
            "text": "Para guardar dados localmente, podemos usar a funcionalidade  localStorage , definida e suportada nos browsers mais modernos. O seu funcionamento \u00e9 bastante simples.  // para gravar\nlocalStorage.setItem('nomeInfo', 'conteudo');\n// para recuperar\nlocalStorage.getItem('nomeInfo');  O  localStorage  guarda apenas strings, ent\u00e3o, para guardar um objeto mais complexo, \u00e9 necess\u00e1rio transform\u00e1-lo em JSON (formato de objeto serializado). Veja o exemplo abaixo.  // para guardar\nlocalStorage.setItem('chaveMeuObjeto', JSON.stringify(meuObjeto));\n// para recuperar\nmeuObjeto = JSON.parse(localStorage.getItem('chaveMeuObjeto'));", 
            "title": "Dados locais"
        }, 
        {
            "location": "/aulas/introd-node/", 
            "text": "Introdu\u00e7\u00e3o ao \nNode.js\n\n\nNode.js \u00e9 uma plataforma para executar aplica\u00e7\u00f5es em JavaScript que faz uso da m\u00e1quina virtual V8 (a mesma do Google Chrome) para compilar JavaScript em linguagem de m\u00e1quina, o que aumenta muito sua performance. A plataforma Node.js foi criada para uso em aplica\u00e7\u00f5es com uso intensivo de dados e comunica\u00e7\u00e3o em tempo real. Por isso, \u00e9 cada vez mais usada em games e aplicativos web de colabora\u00e7\u00e3o e streaming. Por ser escrita toda em JS, a plataforma Node foi criada conta com as seguintes vantagens:\n\n\n\n\nPermitir a cria\u00e7\u00e3o de aplica\u00e7\u00f5es web com uma stack em uma \u00fanica linguagem.\n\n\nPermitir o uso nativo de JSON, um formato bastante popular para troca de dados.\n\n\nJavaScript \u00e9 uma linguagem final, ou seja, outras linguagens compilam para JavaScript.\n\n\n\n\nAbaixo vamos discutir alguns dos aspectos mais relevantes do Node.js para seu uso no desenvolvimento de aplica\u00e7\u00f5es web (e jogos).\n\n\nPlataforma event-driven e ass\u00edncrona\n\n\nO Node, assim como browsers, tem uma arquitetura baseada no uso de eventos de forma ass\u00edncrona, ou seja, tem um loop de eventos como forma de comunica\u00e7\u00e3o entre fun\u00e7\u00f5es e n\u00e3o bloqueiam a execu\u00e7\u00e3o quando realizando opera\u00e7\u00f5es de entrada e sa\u00edda (I/O).\n\n\n\n\nAqui vemos um exemplo de eventos e assincronia no browser.\n\n\n// usando a biblioteca jQuery\n$.post('/resource.json', function (data) {\n    console.log(data)\n})\n\n\n\n\nJ\u00e1 em uma aplica\u00e7\u00e3o Node no servidor, seria:\n\n\nvar fs = require(\nfs\n)\nfs.readFile(\n./resource.json\n, function (err, data) {\n    console.log(data)\n})\n\n\n\n\nA aplica\u00e7\u00e3o \u00e9 o servidor\n\n\nEm Node, uma aplica\u00e7\u00e3o cria seu pr\u00f3prio servidor (ou mais de um) para lidar com as requisi\u00e7\u00f5es que recebe dos clientes que se conectarem a ela. Isso \u00e9 particularmente poderoso no caso de aplica\u00e7\u00f5es que trabalham tanto com a entrega de arquivos est\u00e1ticos atrav\u00e9s de \nHTTP\n ou com eventos reais atrav\u00e9s de \nWebSockets\n, ou mesmo no caso de outros protocolos. Aqui est\u00e1 um exemplo de uma aplica\u00e7\u00e3o que cria um servidor que responde a qualquer request com um mesmo texto.\n\n\nvar http = require('http') // carregamento de modulo\nvar server = http.createServer()\nserver.on('request', function (req, res) {\n    res.writeHead(200, {'Content-Type': 'text/plain'})\n    res.end('Hello World\\n')\n})\nserver.listen(3000)\nconsole.log('Server running at http://localhost:3000/')\n\n\n\n\nExerc\u00edcio\n\n\nPara ter um primeiro contato com o ambiente do Node.js, vamos criar um aplicativo de chat em tempo real. Vamos utilizar alguns m\u00f3dulos externos (\nsocket.io\n e \nexpress\n). Neste projeto vamos conhecer mais sobre como:\n\n\n\n\nComo importar m\u00f3dulos externos atrav\u00e9s do \nNPM\n\n\nEnviar arquivos est\u00e1ticos para o cliente (CSS, JS, HTML)\n\n\nTratar mensagens no servidor com \nsocket.io\n\n\nTratar mensagens no cliente com \nsocket.io", 
            "title": "Introdu\u00e7\u00e3o ao Node.js"
        }, 
        {
            "location": "/aulas/introd-node/#introducao-ao-nodejs", 
            "text": "Node.js \u00e9 uma plataforma para executar aplica\u00e7\u00f5es em JavaScript que faz uso da m\u00e1quina virtual V8 (a mesma do Google Chrome) para compilar JavaScript em linguagem de m\u00e1quina, o que aumenta muito sua performance. A plataforma Node.js foi criada para uso em aplica\u00e7\u00f5es com uso intensivo de dados e comunica\u00e7\u00e3o em tempo real. Por isso, \u00e9 cada vez mais usada em games e aplicativos web de colabora\u00e7\u00e3o e streaming. Por ser escrita toda em JS, a plataforma Node foi criada conta com as seguintes vantagens:   Permitir a cria\u00e7\u00e3o de aplica\u00e7\u00f5es web com uma stack em uma \u00fanica linguagem.  Permitir o uso nativo de JSON, um formato bastante popular para troca de dados.  JavaScript \u00e9 uma linguagem final, ou seja, outras linguagens compilam para JavaScript.   Abaixo vamos discutir alguns dos aspectos mais relevantes do Node.js para seu uso no desenvolvimento de aplica\u00e7\u00f5es web (e jogos).", 
            "title": "Introdu\u00e7\u00e3o ao Node.js"
        }, 
        {
            "location": "/aulas/introd-node/#plataforma-event-driven-e-assincrona", 
            "text": "O Node, assim como browsers, tem uma arquitetura baseada no uso de eventos de forma ass\u00edncrona, ou seja, tem um loop de eventos como forma de comunica\u00e7\u00e3o entre fun\u00e7\u00f5es e n\u00e3o bloqueiam a execu\u00e7\u00e3o quando realizando opera\u00e7\u00f5es de entrada e sa\u00edda (I/O).   Aqui vemos um exemplo de eventos e assincronia no browser.  // usando a biblioteca jQuery\n$.post('/resource.json', function (data) {\n    console.log(data)\n})  J\u00e1 em uma aplica\u00e7\u00e3o Node no servidor, seria:  var fs = require( fs )\nfs.readFile( ./resource.json , function (err, data) {\n    console.log(data)\n})", 
            "title": "Plataforma event-driven e ass\u00edncrona"
        }, 
        {
            "location": "/aulas/introd-node/#a-aplicacao-e-o-servidor", 
            "text": "Em Node, uma aplica\u00e7\u00e3o cria seu pr\u00f3prio servidor (ou mais de um) para lidar com as requisi\u00e7\u00f5es que recebe dos clientes que se conectarem a ela. Isso \u00e9 particularmente poderoso no caso de aplica\u00e7\u00f5es que trabalham tanto com a entrega de arquivos est\u00e1ticos atrav\u00e9s de  HTTP  ou com eventos reais atrav\u00e9s de  WebSockets , ou mesmo no caso de outros protocolos. Aqui est\u00e1 um exemplo de uma aplica\u00e7\u00e3o que cria um servidor que responde a qualquer request com um mesmo texto.  var http = require('http') // carregamento de modulo\nvar server = http.createServer()\nserver.on('request', function (req, res) {\n    res.writeHead(200, {'Content-Type': 'text/plain'})\n    res.end('Hello World\\n')\n})\nserver.listen(3000)\nconsole.log('Server running at http://localhost:3000/')", 
            "title": "A aplica\u00e7\u00e3o \u00e9 o servidor"
        }, 
        {
            "location": "/aulas/introd-node/#exercicio", 
            "text": "Para ter um primeiro contato com o ambiente do Node.js, vamos criar um aplicativo de chat em tempo real. Vamos utilizar alguns m\u00f3dulos externos ( socket.io  e  express ). Neste projeto vamos conhecer mais sobre como:   Como importar m\u00f3dulos externos atrav\u00e9s do  NPM  Enviar arquivos est\u00e1ticos para o cliente (CSS, JS, HTML)  Tratar mensagens no servidor com  socket.io  Tratar mensagens no cliente com  socket.io", 
            "title": "Exerc\u00edcio"
        }, 
        {
            "location": "/materiais/", 
            "text": "Materiais\n\n\nAqui voc\u00ea encontra os materiais produzidos em sala de aula, como exemplos, exerc\u00edcios, etc.\n\n\n\n\n\n\n\n\nData\n\n\nLink\n\n\n\n\n\n\n\n\n\n\n12/08\n\n\nAula sobre HTML e CSS\n\n\n\n\n\n\n19/08\n\n\nRogueJS\n\n\n\n\n\n\n25/08\n\n\nMissile Command", 
            "title": "Materiais de aula"
        }, 
        {
            "location": "/materiais/#materiais", 
            "text": "Aqui voc\u00ea encontra os materiais produzidos em sala de aula, como exemplos, exerc\u00edcios, etc.     Data  Link      12/08  Aula sobre HTML e CSS    19/08  RogueJS    25/08  Missile Command", 
            "title": "Materiais"
        }, 
        {
            "location": "/ferramentas/", 
            "text": "Ferramentas\n\n\nFerramentas que ser\u00e3o utilizadas na disciplina. Todas s\u00e3o gratuitas.\n\n\nBibliotecas\n\n\n\n\nphaser.io\n: Engine para programa\u00e7\u00e3o de jogos web mais elaborados e com grande suporte a plugins e ferramentas externas.\n\n\njQuery\n: Biblioteca com utilidades para manipula\u00e7\u00e3o de HTML em Javascript.\n\n\n\n\nOnline\n\n\n\n\nCodepen\n -\n Editor online para desenvolvimento web (cliente). Pr\u00e1tico para testes e experimentos.\n\n\nPhaser Sandbox\n -\n Editor online para experimentar com a engine \nPhaser\n.\n\n\n\n\nStandalone\n\n\n\n\nNode.js\n -\n Plataforma para a cria\u00e7\u00e3o de software em Javascript (servidor e cliente).\n\n\nBrackets\n -\n Editor de c\u00f3digo com boas features para preview de c\u00f3digo Javascript e desenvolvimento web no geral.\n\n\nWAMP Server\n -\n Programa que cria um servidor b\u00e1sico local para testes.\n\n\nGithub For Windows\n -\n Programa para facilitar o gerenciamento de reposit\u00f3rios e desenvolvimento em Windows.", 
            "title": "Ferramentas"
        }, 
        {
            "location": "/ferramentas/#ferramentas", 
            "text": "Ferramentas que ser\u00e3o utilizadas na disciplina. Todas s\u00e3o gratuitas.", 
            "title": "Ferramentas"
        }, 
        {
            "location": "/ferramentas/#bibliotecas", 
            "text": "phaser.io : Engine para programa\u00e7\u00e3o de jogos web mais elaborados e com grande suporte a plugins e ferramentas externas.  jQuery : Biblioteca com utilidades para manipula\u00e7\u00e3o de HTML em Javascript.", 
            "title": "Bibliotecas"
        }, 
        {
            "location": "/ferramentas/#online", 
            "text": "Codepen  -  Editor online para desenvolvimento web (cliente). Pr\u00e1tico para testes e experimentos.  Phaser Sandbox  -  Editor online para experimentar com a engine  Phaser .", 
            "title": "Online"
        }, 
        {
            "location": "/ferramentas/#standalone", 
            "text": "Node.js  -  Plataforma para a cria\u00e7\u00e3o de software em Javascript (servidor e cliente).  Brackets  -  Editor de c\u00f3digo com boas features para preview de c\u00f3digo Javascript e desenvolvimento web no geral.  WAMP Server  -  Programa que cria um servidor b\u00e1sico local para testes.  Github For Windows  -  Programa para facilitar o gerenciamento de reposit\u00f3rios e desenvolvimento em Windows.", 
            "title": "Standalone"
        }, 
        {
            "location": "/referencias/", 
            "text": "Refer\u00eancias\n\n\nBibliografia, links e outros materiais de refer\u00eancia.\n\n\nLivros\n\n\n\n\nALEX R., M. Y., HARTER. \nNode.js in Practice.\n [s.l.] Manning Publications, 1900. v. 1\n\n\nNYSTROM, R. \nGame Programming Patterns.\n Dispon\u00edvel em: \nhttp://gameprogrammingpatterns.com/\n. Acesso em: 27 jul. 2015. \n\n\nMADHAV, S. \nGame Programming Algorithms and Techniques: A Platform-Agnostic Approach.\n 1 edition ed. Indianapolis, IN: Addison-Wesley Professional, 2013. \n\n\nMCMILLAN, M. \nData Structures and Algorithms with JavaScript.\n [s.l.] O\u2019Reilly, 100AD. v. 1\n\n\nMIKE CANTELON, T. H.; RAJLICH, N. \nNode.js in Action.\n [s.l: s.n.]. v. 1\n\n\nOSMANI, A. \nLearning JavaScript Design Patterns.\n [s.l.] O\u2019Reilly Media, 2012. v. 1\n\n\nSHIFFMAN, D. \nThe Nature of Code: Simulating Natural Systems with Processing.\n 1 edition ed. s.l.: The Nature of Code, 2012.  Dispon\u00edvel em: \nhttp://natureofcode.com/book/\n.\n\n\nSTEFANOV, S. \nJavaScript Patterns.\n [s.l.] O\u2019Reilly Media, 2010. v. 1\n\n\nTIMMS, S. \nMastering JavaScript Design Patterns.\n [s.l.] Packt Publishing, 2014. v. 1\n\n\n\n\nArtigos\n\n\n\n\nBrowser game\n\n\nHist\u00f3ria de jogos online\n\n\nInternet\n\n\nHist\u00f3ria da Internet\n\n\nWorld Wide Web\n\n\nHist\u00f3ria da web\n\n\nBrowser\n\n\nHist\u00f3ria dos browsers\n\n\nTimeline de browsers\n\n\nBrowsers mobile\n\n\n\n\nPortais de jogos\n\n\n\n\nAdult Swim\n\n\nKongregate\n\n\nJay is Games\n\n\nMiniclip\n\n\nMochi Media\n\n\nMolleindustria\n\n\nNewgrounds\n\n\nNitrome\n\n\nGameJolt\n\n\nMoby Games\n\n\n\n\nJogos na web\n\n\n\n\nDys4ia\n\n\nHowling dogs\n\n\n2048\n\n\nQWOP\n\n\nCanabalt\n\n\nFancy Pants Adventures\n\n\nRobot Unicorn Attack\n\n\nCandy box\n\n\nDesktop tower defense\n\n\nYou have to burn the rope\n\n\nDon\nt look back\n\n\nLine rider\n\n\nWe, the giants\n\n\nMeteorus\n\n\nMafia Wars\n\n\nClub Penguin\n\n\n8BitMMO\n\n\nFarmville\n\n\nRealm of the Mad God\n\n\nHelicopter game\n\n\nGrow games\n\n\n\n\nDocumenta\u00e7\u00e3o\n\n\n\n\njQuery Cheatsheet", 
            "title": "Refer\u00eancias"
        }, 
        {
            "location": "/referencias/#referencias", 
            "text": "Bibliografia, links e outros materiais de refer\u00eancia.", 
            "title": "Refer\u00eancias"
        }, 
        {
            "location": "/referencias/#livros", 
            "text": "ALEX R., M. Y., HARTER.  Node.js in Practice.  [s.l.] Manning Publications, 1900. v. 1  NYSTROM, R.  Game Programming Patterns.  Dispon\u00edvel em:  http://gameprogrammingpatterns.com/ . Acesso em: 27 jul. 2015.   MADHAV, S.  Game Programming Algorithms and Techniques: A Platform-Agnostic Approach.  1 edition ed. Indianapolis, IN: Addison-Wesley Professional, 2013.   MCMILLAN, M.  Data Structures and Algorithms with JavaScript.  [s.l.] O\u2019Reilly, 100AD. v. 1  MIKE CANTELON, T. H.; RAJLICH, N.  Node.js in Action.  [s.l: s.n.]. v. 1  OSMANI, A.  Learning JavaScript Design Patterns.  [s.l.] O\u2019Reilly Media, 2012. v. 1  SHIFFMAN, D.  The Nature of Code: Simulating Natural Systems with Processing.  1 edition ed. s.l.: The Nature of Code, 2012.  Dispon\u00edvel em:  http://natureofcode.com/book/ .  STEFANOV, S.  JavaScript Patterns.  [s.l.] O\u2019Reilly Media, 2010. v. 1  TIMMS, S.  Mastering JavaScript Design Patterns.  [s.l.] Packt Publishing, 2014. v. 1", 
            "title": "Livros"
        }, 
        {
            "location": "/referencias/#artigos", 
            "text": "Browser game  Hist\u00f3ria de jogos online  Internet  Hist\u00f3ria da Internet  World Wide Web  Hist\u00f3ria da web  Browser  Hist\u00f3ria dos browsers  Timeline de browsers  Browsers mobile", 
            "title": "Artigos"
        }, 
        {
            "location": "/referencias/#portais-de-jogos", 
            "text": "Adult Swim  Kongregate  Jay is Games  Miniclip  Mochi Media  Molleindustria  Newgrounds  Nitrome  GameJolt  Moby Games", 
            "title": "Portais de jogos"
        }, 
        {
            "location": "/referencias/#jogos-na-web", 
            "text": "Dys4ia  Howling dogs  2048  QWOP  Canabalt  Fancy Pants Adventures  Robot Unicorn Attack  Candy box  Desktop tower defense  You have to burn the rope  Don t look back  Line rider  We, the giants  Meteorus  Mafia Wars  Club Penguin  8BitMMO  Farmville  Realm of the Mad God  Helicopter game  Grow games", 
            "title": "Jogos na web"
        }, 
        {
            "location": "/referencias/#documentacao", 
            "text": "jQuery Cheatsheet", 
            "title": "Documenta\u00e7\u00e3o"
        }
    ]
}